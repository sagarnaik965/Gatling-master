package com.myGatlingTest
import com.myGatlingTest.Main.{callJavaMethod}
import scala.util.Random
import io.gatling.core.Predef._
import io.gatling.http.Predef._
import scala.concurrent.duration.DurationInt
class ConnectorLoadTest extends Simulation{
  val httpProtocol = http
//    .baseUrl("http://10.210.9.109:8082")
    .baseUrl("http://localhost:8080")
//    .baseUrl("http://10.210.9.97:8888")

//  val csvFeeder = csv("data/loadData.csv")
  val csvFeeder = csv("data/dummy.csv").circular

//  --------------working feeder demo-----------------
  val feederDemo = Iterator.continually {
    Map("email" -> s"${Random.alphanumeric.take(20).mkString}@foo.com")
  }

  val feederFromJava = Iterator.continually {
//    Map("email" -> s"${callJavaMethod("Calling from feeder")}@foo.com")
    Map("email" -> s"${callJavaMethod("Calling from feeder")}")
  }

  def getAmeyTest() = {
    exec(
      http("Get all video games")
        .get("/?name=sr")
      //        .check(status.is(200))
    )
  }
  val scnTest = scenario("test java class ")
    .exec(getAmeyTest())

  val scnJavaCall = scenario("My Scenario")
    .exec(session => {
      val result = callJavaMethod("calling from scnJavaCall")
      println("Result from Java method: " + result)
      session
    })

//  val scnGenerateFeeder = scenario("My Scenario")
//    .feed(generateFeeder())
//    .exec(session => {
//      val data = session("data").as[String]
//      println("Data from feeder: " + data)
//      session
//    })


//--------------------Working Custom Feeder from java class-------------------------
  val scnJavaFeeder = scenario("My Scenario")
    .feed(feederFromJava) // Use the custom Java feeder
    .exec(session => {
            val data = session("email").as[String]
            println("Data from feeder: " + data)
            session
          })
//    .exec(http("LoadTestHome for #{aadhaar}")
//      .post("/Stub/inputs")
//      .header("Content-Type", "text/plain")
//      .body(StringBody("""${email},${email}""")))


//  -------------original for custom Feeder------------------

//  val scnJavaFeederOriginal = scenario("My Scenario")
//    .feed(feederFromJava) // Use the custom Java feeder
//    .exec(session => {
//      val data = session("email").as[String]
//      println("Data from feeder: " + data)
//      session
//    })
//    .exec(http("My POST Request")
//      .post("/myEndpoint")
//      .body(StringBody("${data}")) // Use the data generated by the Java method
//      .asJson)



  val scnLoad = scenario("LoadTest")
    .feed(csvFeeder)
//    .exec(getSpecificGame())
    .exec()
    .exec(http("LoadTestHome for #{aadhaar}")
      .post("/Stub/inputs")
      .header("Content-Type", "text/plain")
      .body(StringBody("""{ ${aadhaar},${gender}}"""))
      //.body(StringBody("""{ 534354163142,MALE}"""))
      .check(bodyString.saveAs("Auth_Response"))
    )


  before({
    println(s"java random ${new JavaClass().toString()}")
  })


  setUp(
    scnJavaFeeder.inject(
      constantUsersPerSec(10) during (1 seconds)
    ).protocols(httpProtocol)

//    scnLoad.inject(
////      			nothingFor(60 seconds),
////      atOnceUsers(10),
////      			rampUsers(2) during (10 seconds),
//      			constantUsersPerSec(10) during (1 seconds)
//    ).protocols(httpProtocol)
  )


}
